type Feedback {
    id: ID!
    message: String!
    userId: ID
    status: Status!
    assignmentId: ID
    }

type User {
    id: ID!
    name: String!
    email: String!
    feedbacks: [Feedback!]
}

type Employee {
    id: ID!
    name: String!
    role: Role!
    assignments: [Assignment!]
}

type Assignment {
    id: ID!
    feedbackId: ID
    employerId: ID
}

enum Status {
    PENDING
    ASSIGNED
    RESOLVED
    CLOSED
}

enum Role {
    MANAGER
    REVIEWER
    CASHIER
}

input SetAssignmentInput {
    employeeId: ID!
    feedbackId: ID!
}

input FeedbackCreateInput {
    message: String!
    userId: ID!
}


input UserView {
    name: String!
    email: String!
}

input UpdateUserView {
    id: ID!
    email: String!
}

input EmployeeView {
    name: String!
    role: String!
}

type Query {
    allFeedbacks: [Feedback!]!
    feedbackById(id: ID!): Feedback
    allUsers: [User!]!
    userById(id: ID!): User
    allEmployees: [Employee!]!
    employeeById(id: ID!): Employee
    allAssignments: [Assignment!]!
    assignmentById(id: ID!): Assignment
}

type Mutation {
    changeStatus(id: ID!, status: String!): Feedback!
    setAssignment(setAssignmentView: SetAssignmentInput!): Feedback!
    createFeedback(feedbackCreateView: FeedbackCreateInput!): Feedback!
    createUser(userView: UserView!): User!
    updateUserEmail(updateUserView: UpdateUserView): User!
    createEmployee(employeeView: EmployeeView!): Employee!
    changeRole(id: ID!, role: String!): Employee!
}